{"version":3,"file":"41.dist-bundle.js","mappings":"wFAGWA,E,kBAAAA,EAgBT,SAASC,GACXA,EAAMC,QAAU,QAqBhB,IAAIC,EAnBJ,WAGC,IAFA,IAAIC,EAAI,EAAGD,EAAQ,IAAIE,MAAM,KAErBC,EAAG,EAAQ,KAALA,IAAYA,EASzBF,EAAQ,GADRA,EAAQ,GADRA,EAAQ,GADRA,EAAQ,GADRA,EAAQ,GADRA,EAAQ,GADRA,EAAQ,GADRA,EAAQ,GADRA,EAAIE,IACW,UAAaF,IAAM,EAAOA,IAAM,IAChC,UAAaA,IAAM,EAAOA,IAAM,IAChC,UAAaA,IAAM,EAAOA,IAAM,IAChC,UAAaA,IAAM,EAAOA,IAAM,IAChC,UAAaA,IAAM,EAAOA,IAAM,IAChC,UAAaA,IAAM,EAAOA,IAAM,IAChC,UAAaA,IAAM,EAAOA,IAAM,IAChC,UAAaA,IAAM,EAAOA,IAAM,EAC/CD,EAAMG,GAAKF,EAGZ,MAA6B,oBAAfG,WAA6B,IAAIA,WAAWJ,GAASA,EAGxDK,GAERC,OAA+B,IAAXC,EAwBxB,SAASC,EAAYC,GACpB,IAAI,IAAIC,GAAO,EAAGC,EAAI,EAAGC,EAAEH,EAAII,OAAO,EAAGF,EAAIC,GAQ5CF,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,EAAOA,IAAQ,EAAKV,EAAqB,KAAdU,EAAID,EAAIE,UACpB,EAAKX,EAAqB,KAAdU,EAAID,EAAIE,UACpB,EAAKX,EAAqB,KAAdU,EAAID,EAAIE,UACpB,EAAKX,EAAqB,KAAdU,EAAID,EAAIE,UACpB,EAAKX,EAAqB,KAAdU,EAAID,EAAIE,UACpB,EAAKX,EAAqB,KAAdU,EAAID,EAAIE,UACpB,EAAKX,EAAqB,KAAdU,EAAID,EAAIE,UACpB,EAAKX,EAAqB,KAAdU,EAAID,EAAIE,OAEpC,KAAMA,EAAIC,EAAE,GAAGF,EAAOA,IAAQ,EAAKV,EAAqB,KAAdU,EAAID,EAAIE,OAClD,OAAc,EAAPD,EA0BRZ,EAAME,MAAQA,EACdF,EAAMgB,KA9DN,SAAoBA,GACnB,GAAGA,EAAKD,OAAS,OAAUP,EAAY,OAAOE,EAAY,IAAID,EAAOO,IAErE,IADA,IAAIJ,GAAO,EAAGE,EAAIE,EAAKD,OAAS,EACxBF,EAAI,EAAGA,EAAIC,GAClBF,EAAOV,EAAqC,KAA9BU,EAAMI,EAAKC,WAAWJ,OAAiBD,IAAQ,EAC7DA,EAAOV,EAAqC,KAA9BU,EAAMI,EAAKC,WAAWJ,OAAiBD,IAAQ,EAG9D,OADGC,IAAMC,IAAGF,EAAOA,IAAQ,EAAKV,EAAmC,KAA5BU,EAAMI,EAAKC,WAAWJ,OAC/C,EAAPD,GAuDRZ,EAAMW,IApDN,SAAmBA,GAClB,GAAGA,EAAII,OAAS,IAAO,OAAOL,EAAYC,GAC1C,IAAI,IAAIC,GAAO,EAAGC,EAAI,EAAGC,EAAEH,EAAII,OAAO,EAAGF,EAAIC,GAI5CF,GADAA,GADAA,GADAA,EAAOA,IAAQ,EAAKV,EAAqB,KAAdU,EAAID,EAAIE,UACpB,EAAKX,EAAqB,KAAdU,EAAID,EAAIE,UACpB,EAAKX,EAAqB,KAAdU,EAAID,EAAIE,UACpB,EAAKX,EAAqB,KAAdU,EAAID,EAAIE,OAEpC,KAAMA,EAAIC,EAAE,GAAGF,EAAOA,IAAQ,EAAKV,EAAqB,KAAdU,EAAID,EAAIE,OAClD,OAAc,EAAPD,GA4CRZ,EAAMkB,IAzBN,SAAmBA,GAClB,IAAI,IAAmCf,EAAGgB,EAAlCP,GAAO,EAAGC,EAAI,EAAGC,EAAEI,EAAIH,OAAcF,EAAIC,IAChDX,EAAIe,EAAID,WAAWJ,MACZ,IACND,EAAOA,IAAQ,EAAKV,EAAkB,KAAXU,EAAMT,IACxBA,EAAI,KAEbS,GADAA,EAAOA,IAAQ,EAAKV,EAAkC,KAA3BU,GAAO,IAAMT,GAAG,EAAG,SAC/B,EAAKD,EAA6B,KAAtBU,GAAO,IAAO,GAAFT,KAC9BA,GAAK,OAAUA,EAAI,OAC5BA,EAAa,IAAN,KAAFA,GAAYgB,EAA0B,KAAtBD,EAAID,WAAWJ,KAIpCD,GADAA,GADAA,GADAA,EAAOA,IAAQ,EAAKV,EAAiC,KAA1BU,GAAO,IAAMT,GAAG,EAAG,QAC/B,EAAKD,EAAkC,KAA3BU,GAAO,IAAMT,GAAG,EAAG,SAC/B,EAAKD,EAAwC,KAAjCU,GAAO,IAAMO,GAAG,EAAG,GAAO,EAAFhB,QACpC,EAAKD,EAA6B,KAAtBU,GAAO,IAAO,GAAFO,MAIvCP,GADAA,GADAA,EAAOA,IAAQ,EAAKV,EAAmC,KAA5BU,GAAO,IAAMT,GAAG,GAAI,SAChC,EAAKD,EAAkC,KAA3BU,GAAO,IAAMT,GAAG,EAAG,SAC/B,EAAKD,EAA6B,KAAtBU,GAAO,IAAO,GAAFT,KAGzC,OAAc,EAAPS,IAnGyB,oBAAtBQ,kBAERrB,EAAQsB,GAWTtB,EAAgB,K,eCjBlB,IAAIuB,EAAQ,EAAQ,OAEpBC,EAAOF,QASP,SAAwBG,GACtB,GAAgB,MAAZA,EAAK,GAAa,MAAM,IAAIC,MAAM,4BACtC,GAAgB,KAAZD,EAAK,GAAa,MAAM,IAAIC,MAAM,4BACtC,GAAgB,KAAZD,EAAK,GAAa,MAAM,IAAIC,MAAM,4BACtC,GAAgB,KAAZD,EAAK,GAAa,MAAM,IAAIC,MAAM,4BACtC,GAAgB,KAAZD,EAAK,GAAa,MAAM,IAAIC,MAAM,iFACtC,GAAgB,KAAZD,EAAK,GAAa,MAAM,IAAIC,MAAM,iFACtC,GAAgB,KAAZD,EAAK,GAAa,MAAM,IAAIC,MAAM,4BACtC,GAAgB,KAAZD,EAAK,GAAa,MAAM,IAAIC,MAAM,iFAMtC,IAJA,IAAIC,GAAQ,EACRC,EAAS,GACTC,EAAM,EAEHA,EAAMJ,EAAKT,QAAQ,CAGxBc,EAAM,GAAKL,EAAKI,KAChBC,EAAM,GAAKL,EAAKI,KAChBC,EAAM,GAAKL,EAAKI,KAChBC,EAAM,GAAKL,EAAKI,KAGhB,IAAIb,EAASe,EAAO,GAAK,EACrBC,EAAQ,IAAIC,WAAWjB,GAC3BgB,EAAM,GAAKP,EAAKI,KAChBG,EAAM,GAAKP,EAAKI,KAChBG,EAAM,GAAKP,EAAKI,KAChBG,EAAM,GAAKP,EAAKI,KAGhB,IAAIK,EACFC,OAAOC,aAAaJ,EAAM,IAC1BG,OAAOC,aAAaJ,EAAM,IAC1BG,OAAOC,aAAaJ,EAAM,IAC1BG,OAAOC,aAAaJ,EAAM,IAI5B,IAAKJ,EAAOZ,QAAmB,SAATkB,EACpB,MAAM,IAAIR,MAAM,uBAKlB,GAAa,SAATQ,EAAiB,CACnBP,GAAQ,EACRC,EAAOS,KAAK,CACVH,KAAMA,EACNT,KAAM,IAAIQ,WAAW,KAGvB,MAIF,IAAK,IAAInB,EAAI,EAAGA,EAAIE,EAAQF,IAC1BkB,EAAMlB,GAAKW,EAAKI,KAKlBC,EAAM,GAAKL,EAAKI,KAChBC,EAAM,GAAKL,EAAKI,KAChBC,EAAM,GAAKL,EAAKI,KAChBC,EAAM,GAAKL,EAAKI,KAEhB,IAAIS,EAAYC,EAAM,GAEtB,GADgBhB,EAAMX,IAAIoB,KACRM,EAChB,MAAM,IAAIZ,MACR,kBAAoBQ,EAAO,sDAM/B,IAAIM,EAAY,IAAIP,WAAWD,EAAMS,OAAOC,MAAM,IAElDd,EAAOS,KAAK,CACVH,KAAMA,EACNT,KAAMe,IAIV,IAAKb,EACH,MAAM,IAAID,MAAM,yDAGlB,OAAOE,GA7FT,IAAIE,EAAQ,IAAIG,WAAW,GACvBM,EAAQ,IAAIhC,WAAWuB,EAAMW,QAC7BV,EAAS,IAAIY,YAAYb,EAAMW","sources":["webpack://website/./node_modules/crc-32/crc32.js","webpack://website/./node_modules/png-chunks-extract/index.js"],"sourcesContent":["/* crc32.js (C) 2014-2015 SheetJS -- http://sheetjs.com */\n/* vim: set ts=2: */\nvar CRC32;\n(function (factory) {\n\tif(typeof DO_NOT_EXPORT_CRC === 'undefined') {\n\t\tif('object' === typeof exports) {\n\t\t\tfactory(exports);\n\t\t} else if ('function' === typeof define && define.amd) {\n\t\t\tdefine(function () {\n\t\t\t\tvar module = {};\n\t\t\t\tfactory(module);\n\t\t\t\treturn module;\n\t\t\t});\n\t\t} else {\n\t\t  factory(CRC32 = {});\n\t\t}\n\t} else {\n\t\tfactory(CRC32 = {});\n\t}\n}(function(CRC32) {\nCRC32.version = '0.3.0';\n/* see perf/crc32table.js */\nfunction signed_crc_table() {\n\tvar c = 0, table = new Array(256);\n\n\tfor(var n =0; n != 256; ++n){\n\t\tc = n;\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\ttable[n] = c;\n\t}\n\n\treturn typeof Int32Array !== 'undefined' ? new Int32Array(table) : table;\n}\n\nvar table = signed_crc_table();\n/* charCodeAt is the best approach for binary strings */\nvar use_buffer = typeof Buffer !== 'undefined';\nfunction crc32_bstr(bstr) {\n\tif(bstr.length > 32768) if(use_buffer) return crc32_buf_8(new Buffer(bstr));\n\tvar crc = -1, L = bstr.length - 1;\n\tfor(var i = 0; i < L;) {\n\t\tcrc =  table[(crc ^ bstr.charCodeAt(i++)) & 0xFF] ^ (crc >>> 8);\n\t\tcrc =  table[(crc ^ bstr.charCodeAt(i++)) & 0xFF] ^ (crc >>> 8);\n\t}\n\tif(i === L) crc = (crc >>> 8) ^ table[(crc ^ bstr.charCodeAt(i)) & 0xFF];\n\treturn crc ^ -1;\n}\n\nfunction crc32_buf(buf) {\n\tif(buf.length > 10000) return crc32_buf_8(buf);\n\tfor(var crc = -1, i = 0, L=buf.length-3; i < L;) {\n\t\tcrc = (crc >>> 8) ^ table[(crc^buf[i++])&0xFF];\n\t\tcrc = (crc >>> 8) ^ table[(crc^buf[i++])&0xFF];\n\t\tcrc = (crc >>> 8) ^ table[(crc^buf[i++])&0xFF];\n\t\tcrc = (crc >>> 8) ^ table[(crc^buf[i++])&0xFF];\n\t}\n\twhile(i < L+3) crc = (crc >>> 8) ^ table[(crc^buf[i++])&0xFF];\n\treturn crc ^ -1;\n}\n\nfunction crc32_buf_8(buf) {\n\tfor(var crc = -1, i = 0, L=buf.length-7; i < L;) {\n\t\tcrc = (crc >>> 8) ^ table[(crc^buf[i++])&0xFF];\n\t\tcrc = (crc >>> 8) ^ table[(crc^buf[i++])&0xFF];\n\t\tcrc = (crc >>> 8) ^ table[(crc^buf[i++])&0xFF];\n\t\tcrc = (crc >>> 8) ^ table[(crc^buf[i++])&0xFF];\n\t\tcrc = (crc >>> 8) ^ table[(crc^buf[i++])&0xFF];\n\t\tcrc = (crc >>> 8) ^ table[(crc^buf[i++])&0xFF];\n\t\tcrc = (crc >>> 8) ^ table[(crc^buf[i++])&0xFF];\n\t\tcrc = (crc >>> 8) ^ table[(crc^buf[i++])&0xFF];\n\t}\n\twhile(i < L+7) crc = (crc >>> 8) ^ table[(crc^buf[i++])&0xFF];\n\treturn crc ^ -1;\n}\n\n/* much much faster to intertwine utf8 and crc */\nfunction crc32_str(str) {\n\tfor(var crc = -1, i = 0, L=str.length, c, d; i < L;) {\n\t\tc = str.charCodeAt(i++);\n\t\tif(c < 0x80) {\n\t\t\tcrc = (crc >>> 8) ^ table[(crc ^ c) & 0xFF];\n\t\t} else if(c < 0x800) {\n\t\t\tcrc = (crc >>> 8) ^ table[(crc ^ (192|((c>>6)&31))) & 0xFF];\n\t\t\tcrc = (crc >>> 8) ^ table[(crc ^ (128|(c&63))) & 0xFF];\n\t\t} else if(c >= 0xD800 && c < 0xE000) {\n\t\t\tc = (c&1023)+64; d = str.charCodeAt(i++) & 1023;\n\t\t\tcrc = (crc >>> 8) ^ table[(crc ^ (240|((c>>8)&7))) & 0xFF];\n\t\t\tcrc = (crc >>> 8) ^ table[(crc ^ (128|((c>>2)&63))) & 0xFF];\n\t\t\tcrc = (crc >>> 8) ^ table[(crc ^ (128|((d>>6)&15)|(c&3))) & 0xFF];\n\t\t\tcrc = (crc >>> 8) ^ table[(crc ^ (128|(d&63))) & 0xFF];\n\t\t} else {\n\t\t\tcrc = (crc >>> 8) ^ table[(crc ^ (224|((c>>12)&15))) & 0xFF];\n\t\t\tcrc = (crc >>> 8) ^ table[(crc ^ (128|((c>>6)&63))) & 0xFF];\n\t\t\tcrc = (crc >>> 8) ^ table[(crc ^ (128|(c&63))) & 0xFF];\n\t\t}\n\t}\n\treturn crc ^ -1;\n}\nCRC32.table = table;\nCRC32.bstr = crc32_bstr;\nCRC32.buf = crc32_buf;\nCRC32.str = crc32_str;\n}));\n","var crc32 = require('crc-32')\n\nmodule.exports = extractChunks\n\n// Used for fast-ish conversion between uint8s and uint32s/int32s.\n// Also required in order to remain agnostic for both Node Buffers and\n// Uint8Arrays.\nvar uint8 = new Uint8Array(4)\nvar int32 = new Int32Array(uint8.buffer)\nvar uint32 = new Uint32Array(uint8.buffer)\n\nfunction extractChunks (data) {\n  if (data[0] !== 0x89) throw new Error('Invalid .png file header')\n  if (data[1] !== 0x50) throw new Error('Invalid .png file header')\n  if (data[2] !== 0x4E) throw new Error('Invalid .png file header')\n  if (data[3] !== 0x47) throw new Error('Invalid .png file header')\n  if (data[4] !== 0x0D) throw new Error('Invalid .png file header: possibly caused by DOS-Unix line ending conversion?')\n  if (data[5] !== 0x0A) throw new Error('Invalid .png file header: possibly caused by DOS-Unix line ending conversion?')\n  if (data[6] !== 0x1A) throw new Error('Invalid .png file header')\n  if (data[7] !== 0x0A) throw new Error('Invalid .png file header: possibly caused by DOS-Unix line ending conversion?')\n\n  var ended = false\n  var chunks = []\n  var idx = 8\n\n  while (idx < data.length) {\n    // Read the length of the current chunk,\n    // which is stored as a Uint32.\n    uint8[3] = data[idx++]\n    uint8[2] = data[idx++]\n    uint8[1] = data[idx++]\n    uint8[0] = data[idx++]\n\n    // Chunk includes name/type for CRC check (see below).\n    var length = uint32[0] + 4\n    var chunk = new Uint8Array(length)\n    chunk[0] = data[idx++]\n    chunk[1] = data[idx++]\n    chunk[2] = data[idx++]\n    chunk[3] = data[idx++]\n\n    // Get the name in ASCII for identification.\n    var name = (\n      String.fromCharCode(chunk[0]) +\n      String.fromCharCode(chunk[1]) +\n      String.fromCharCode(chunk[2]) +\n      String.fromCharCode(chunk[3])\n    )\n\n    // The IHDR header MUST come first.\n    if (!chunks.length && name !== 'IHDR') {\n      throw new Error('IHDR header missing')\n    }\n\n    // The IEND header marks the end of the file,\n    // so on discovering it break out of the loop.\n    if (name === 'IEND') {\n      ended = true\n      chunks.push({\n        name: name,\n        data: new Uint8Array(0)\n      })\n\n      break\n    }\n\n    // Read the contents of the chunk out of the main buffer.\n    for (var i = 4; i < length; i++) {\n      chunk[i] = data[idx++]\n    }\n\n    // Read out the CRC value for comparison.\n    // It's stored as an Int32.\n    uint8[3] = data[idx++]\n    uint8[2] = data[idx++]\n    uint8[1] = data[idx++]\n    uint8[0] = data[idx++]\n\n    var crcActual = int32[0]\n    var crcExpect = crc32.buf(chunk)\n    if (crcExpect !== crcActual) {\n      throw new Error(\n        'CRC values for ' + name + ' header do not match, PNG file is likely corrupted'\n      )\n    }\n\n    // The chunk data is now copied to remove the 4 preceding\n    // bytes used for the chunk name/type.\n    var chunkData = new Uint8Array(chunk.buffer.slice(4))\n\n    chunks.push({\n      name: name,\n      data: chunkData\n    })\n  }\n\n  if (!ended) {\n    throw new Error('.png file ended prematurely: no IEND header was found')\n  }\n\n  return chunks\n}\n"],"names":["factory","CRC32","version","table","c","Array","n","Int32Array","signed_crc_table","use_buffer","Buffer","crc32_buf_8","buf","crc","i","L","length","bstr","charCodeAt","str","d","DO_NOT_EXPORT_CRC","exports","crc32","module","data","Error","ended","chunks","idx","uint8","uint32","chunk","Uint8Array","name","String","fromCharCode","push","crcActual","int32","chunkData","buffer","slice","Uint32Array"],"sourceRoot":""}